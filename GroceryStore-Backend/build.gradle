plugins {
	id 'org.springframework.boot' version '2.6.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'mcgill.ecse321'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17.0'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	runtimeOnly 'org.postgresql:postgresql'
	// test time
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	// mockito
	testImplementation 'org.mockito:mockito-core:4.3.1'
	testImplementation 'org.mockito:mockito-junit-jupiter:4.3.1'
	// jupiter engine
	testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
	// StringUtils
	implementation 'org.apache.commons:commons-lang3:3.12.0'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register("integrationTest", integrationTest)

abstract class integrationTest extends DefaultTask {
    public final String URL = "https://grocery-backend-g05-mcgill.herokuapp.com/";
    public final String RESET = "\033[0m";
    public final String CYAN_BOLD = "\033[1;96m";
    public final String PURPLE_BOLD = "\033[1;95m";

    @TaskAction
    def doTest() {
        createEntities();
        testItem();
        cleanup();
    }

    def createEntities() {
        println CYAN_BOLD + "CREATE CUSTOMER ACCOUNT" + RESET;
        exec("POST", "customer/integ-customer", "?password=imacustomer&email=customer@myemail.com&address=321%20McTavish%20St.&isLocal=false", null);
        String[] hideKioskError = [" -e password "];
        exec("POST", "customer/kiosk", "?password=grocerystore&email=grocerystore@mail.mcgill.ca&address=514%20King%20St.&isLocal=true", hideKioskError);
        println CYAN_BOLD + "CREATE OWNER ACCOUNT" + RESET;
        exec("POST", "owner/integ-owner", "?password=mcgill12345&email=integration.owner@mail.mcgill.ca", null);
        println CYAN_BOLD + "CREATE EMPLOYEE ACCOUNT" + RESET;
        exec("POST", "employee/integ-employee", "?password=iEmployee**&email=integration.employee@totallylegit.io", null);
        println CYAN_BOLD + "CREATE 2 ITEMS" + RESET;
        exec("POST", "item/integ%20apple", "?price=4.99&inventory=100&canDeliver=true&canPickUp=true", null);
        exec("POST", "item/integ%20ground%20beef", "?price=7.49&inventory=100&canDeliver=false&canPickUp=true", null);
    }

    def testItem() {
        println CYAN_BOLD + "GET ALL ITEMS" + RESET;
        exec("GET", "item/getAll", "", null);
        println CYAN_BOLD + "SEARCH FOR BEEF" + RESET;
        String[] beefMatch = [" -o 'integ ground beef' "];
        exec("GET", "item/searchAscending", "?searchQuery=beef", beefMatch);
    }

    def cleanup() {
        println PURPLE_BOLD + "DELETE THE CREATED ITEMS" + RESET;
        exec("DELETE", "item/integ%20apple", "", null);
        exec("DELETE", "item/integ%20ground%20beef", "", null);
        println PURPLE_BOLD + "DELETE THE CREATED EMPLOYEE" + RESET;
        exec("DELETE", "employee/integ-employee", "", null);
        println PURPLE_BOLD + "DELETE THE CREATED OWNER" + RESET;
        exec("DELETE", "owner/integ-owner", "", null);
        println PURPLE_BOLD + "DELETE THE CUSTOMER ACCOUNT" + RESET;
        exec("DELETE", "customer/integ-customer", "", null);
    }

    def exec(String operation, String endpoint, String params, String[] grepArgs) {
        String commandCurl = "curl -s -X " + operation + " " + URL + endpoint + params;
        String response = "";
        if (grepArgs != null) {
            String commandGrep = "grep";
            for (String arg : grepArgs) {
                commandGrep += arg;
            }
            Process process = commandCurl.execute() | commandGrep.execute();
            response = process.text;
        }
        else {
            response = commandCurl.execute().text;
        }
        if (!response.equals("")) {
            println response;
        }
    }
}
